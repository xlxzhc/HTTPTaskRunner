<template>
  <div class="container">
    <div class="nav-bar">
      <div class="nav-tabs">
        <div 
          class="nav-tab" 
          :class="{ 'active': activeTab === 'requestConfig' }"
          @click="activeTab = 'requestConfig'"
        >
          请求配置
        </div>
        <div 
          class="nav-tab" 
          :class="{ 'active': activeTab === 'taskList' }"
          @click="activeTab = 'taskList'"
        >
          任务列表
          <span v-if="scheduledTasks.length > 0" class="badge">{{ scheduledTasks.length }}</span>
        </div>
      </div>
      <div class="current-time">{{ currentTimeDisplay }}</div>
    </div>
    
    <div class="content" v-if="activeTab === 'requestConfig'">
      <div class="left-panel">
        <div class="card">
          <div class="card-header">
            <h2>请求配置</h2>
            <button @click="showSaveTaskModal = true" class="btn">保存任务</button>
          </div>
          <div class="input-group">
            <label>网址</label>
            <input type="text" v-model="url" placeholder="请输入请求URL" />
          </div>
          <div class="input-group">
            <label>访问方式</label>
            <select v-model="visitMethod">
              <option value="GET">GET</option>
              <option value="POST">POST</option>
              <option value="PUT">PUT</option>
              <option value="DELETE">DELETE</option>
            </select>
          </div>
          <div class="input-group">
            <label>CK</label>
            <input type="text" v-model="ck" placeholder="Cookie信息" />
          </div>
          <div class="input-group">
            <label>协议�?/label>
            <textarea v-model="headers" placeholder="每行一个请求头，格式为 Key: Value" class="headers-input"></textarea>
          </div>
          <div class="input-group">
            <label>提交数据</label>
            <input type="text" v-model="submitData" placeholder="POST数据" />
          </div>
          <div class="input-group">
            <label>请求延迟</label>
            <div class="delay-inputs">
              <input 
                type="text" 
                v-model="delayMin" 
                placeholder="最小�? 
                class="small-input"
                @input="validateDelayInput"
              />
              <span>-</span>
              <input 
                type="text" 
                v-model="delayMax" 
                placeholder="最大�? 
                class="small-input"
                @input="validateDelayInput"
              />
              <span>毫秒</span>
            </div>
          </div>
          <div class="input-group">
            <label>Cron表达�?/label>
            <input type="text" v-model="cronExpression" placeholder="请输入Cron表达�? />
          </div>
          <div class="checkbox-group">
            <input type="checkbox" id="virtualIP" v-model="useVirtualIP" />
            <label for="virtualIP">使用虚拟IP (中国IP)</label>
          </div>
          <div class="notification-box" v-if="hasRemovedGzipHeader">
            <div class="notification-content">
              <i class="notification-icon">ℹ️</i>
              <span>已自动移除包�?gzip �?Accept-Encoding 协议�?/span>
            </div>
          </div>
        </div>

        <div class="card raw-data-card">
          <div class="card-header">
            <h2>Fiddler原始数据</h2>
            <button @click="parseRawData" class="btn primary">解析</button>
          </div>
          <div class="raw-data-container">
            <textarea v-model="rawData" placeholder="粘贴Fiddler捕获的原始数�? class="raw-data"></textarea>
          </div>
        </div>
      </div>

      <div class="right-panel">
        <div class="card">
          <div class="card-header">
            <h2>卡包设置</h2>
          </div>
          <div class="card-settings">
            <div class="settings-row">
              <div class="setting-item">
                <label>卡包�?线程�?/label>
                <input type="text" v-model="cardPackage" class="small-input" />
              </div>
              <div class="setting-item">
                <label>请求次数</label>
                <input type="text" v-model="times" class="small-input" />
              </div>
            </div>
            
            <div class="settings-row">
              <div class="setting-item timer-setting">
                <label>定时执行 (设定执行时间)</label>
                <div class="time-input-group">
                  <input 
                    type="text" 
                    v-model="targetHours" 
                    class="time-input" 
                    placeholder="�? 
                    :disabled="timerActive"
                    @input="validateHours"
                    @focus="initTimeInput('hours')" 
                  />
                  <span>:</span>
                  <input 
                    type="text" 
                    v-model="targetMinutes" 
                    class="time-input" 
                    placeholder="�? 
                    :disabled="timerActive"
                    @input="validateMinutes"
                    @focus="initTimeInput('minutes')" 
                  />
                  <span>:</span>
                  <input 
                    type="text" 
                    v-model="targetSeconds" 
                    class="time-input" 
                    placeholder="�? 
                    :disabled="timerActive"
                    @input="validateSeconds"
                    @focus="initTimeInput('seconds')" 
                  />
                </div>
              </div>
            </div>
          </div>
          
          <div class="button-group">
            <button @click="startCardPackage" class="btn primary" :disabled="executionInProgress">卡包</button>
            <button v-if="runningTaskId" @click="stopRunningTask" class="btn danger">停止</button>
            <button v-else @click="toggleScheduledTimer" class="btn" :class="{ 'warning': timerActive }">
              {{ timerActive ? '取消定时' : '定时' }}
            </button>
            <button v-if="!executionInProgress" @click="testTaskParameters" class="btn">测试参数</button>
          </div>

          <div class="timer-display" :class="{ 'active': timerRunning || timerActive }">
            <div v-if="timerActive" class="countdown">
              定时执行: {{ targetTimeDisplay }} 
              <span class="time-remaining">(剩余: {{ timeRemainingDisplay }})</span>
            </div>
            <div v-if="taskDuration > 0" class="time">任务耗时: {{ formattedTaskDuration }}</div>
          </div>
        </div>

        <div class="card output-card">
          <div class="card-header">
            <h2>执行日志</h2>
            <div class="log-actions">
              <div class="autoscroll-toggle">
                <input type="checkbox" id="autoscroll" v-model="logScrollBottom" />
                <label for="autoscroll">自动滚动</label>
              </div>
              <button @click="clearLog" class="btn">清空</button>
            </div>
          </div>
          <div class="output-area">
            <textarea v-model="outputLog" ref="outputLogRef" readonly></textarea>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Task List View -->
    <div class="content" v-if="activeTab === 'taskList'">
      <div class="tasks-container">
        <div class="card">
          <div class="card-header">
            <h2>任务列表</h2>
            <div class="task-actions">
              <button @click="createNewTask" class="btn primary">创建任务</button>
              <button @click="showImportExportModal = true; importExportMode = 'export'" class="btn">导出</button>
              <button @click="showImportExportModal = true; importExportMode = 'import'" class="btn">导入</button>
            </div>
          </div>
          
          <div class="task-filters">
            <div class="search-box">
              <input type="text" v-model="taskFilter" placeholder="搜索任务名称或URL" />
            </div>
            <div class="tag-filters">
              <div 
                v-for="tag in availableTags" 
                :key="tag" 
                @click="toggleTagFilter(tag)"
                class="tag-filter"
                :class="{ 'active': selectedTags.includes(tag) }"
              >
                {{ tag }}
              </div>
            </div>
          </div>
          
          <div class="task-list">
            <div 
              v-for="task in filteredTasks" 
              :key="task.id" 
              class="task-item"
              :class="{ 'scheduled': scheduledTasks.includes(task.id) }"
            >
              <div class="task-info" @click="loadTaskToForm(task.id)">
                <div class="task-name">{{ task.name }}</div>
                <div class="task-url">{{ task.url }}</div>
                <div class="task-meta">
                  <span>{{ task.method }}</span>
                  <span>线程: {{ task.threads }}</span>
                  <span>次数: {{ task.times }}</span>
                  <span>更新: {{ new Date(task.updatedAt).toLocaleString() }}</span>
                </div>
                <div class="task-tags">
                  <span v-for="tag in task.tags" :key="tag" class="tag">{{ tag }}</span>
                </div>
              </div>
              <div class="task-actions">
                <button 
                  v-if="!scheduledTasks.includes(task.id)" 
                  @click="scheduleTask(task.id)" 
                  class="btn"
                  title="添加到定时队�?
                >
                  定时
                </button>
                <button 
                  v-else 
                  @click="unscheduleTask(task.id)" 
                  class="btn warning"
                  title="从定时队列移�?
                >
                  取消
                </button>
                <button 
                  v-if="task.id === runningTaskId"
                  @click="stopRunningTask()" 
                  class="btn danger"
                  title="停止执行"
                >
                  停止
                </button>
                <button 
                  v-else
                  @click="executeTask(task.id)" 
                  class="btn primary"
                  title="立即执行"
                  :disabled="executionInProgress"
                >
                  执行
                </button>
              </div>
            </div>
            
            <div v-if="filteredTasks.length === 0" class="no-tasks">
              没有找到符合条件的任�?            </div>
          </div>
        </div>
        
        <div class="card output-card">
          <div class="card-header">
            <h2>执行日志</h2>
            <button @click="clearLog" class="btn">清空</button>
          </div>
          <div class="output-area">
            <textarea v-model="outputLog" readonly></textarea>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Task Detail View -->
    <div class="content" v-if="activeTab === 'taskDetail'">
      <div class="left-panel">
        <div class="card">
          <div class="card-header">
            <h2>{{ selectedTaskId ? '编辑任务' : '创建任务' }}</h2>
            <div class="task-actions">
              <button 
                v-if="selectedTaskId" 
                @click="showConfirmDeleteModal = true" 
                class="btn danger"
              >
                删除
              </button>
            </div>
          </div>
          <div class="input-group">
            <label>任务名称</label>
            <input type="text" v-model="taskName" placeholder="请输入任务名�? />
          </div>
          <div class="input-group">
            <label>标签</label>
            <input type="text" v-model="taskTags" placeholder="多个标签用英文逗号分隔" />
          </div>
          <div class="input-group">
            <label>网址</label>
            <input type="text" v-model="url" placeholder="请输入请求URL" />
          </div>
          <div class="input-group">
            <label>访问方式</label>
            <select v-model="visitMethod">
              <option value="GET">GET</option>
              <option value="POST">POST</option>
              <option value="PUT">PUT</option>
              <option value="DELETE">DELETE</option>
            </select>
          </div>
          <div class="input-group">
            <label>CK</label>
            <input type="text" v-model="ck" placeholder="Cookie信息" />
          </div>
          <div class="input-group">
            <label>协议�?/label>
            <textarea v-model="headers" placeholder="每行一个请求头，格式为 Key: Value" class="headers-input"></textarea>
          </div>
          <div class="input-group">
            <label>提交数据</label>
            <input type="text" v-model="submitData" placeholder="POST数据" />
          </div>
          <div class="input-group">
            <label>请求延迟</label>
            <div class="delay-inputs">
              <input 
                type="text" 
                v-model="delayMin" 
                placeholder="最小�? 
                class="small-input"
                @input="validateDelayInput"
              />
              <span>-</span>
              <input 
                type="text" 
                v-model="delayMax" 
                placeholder="最大�? 
                class="small-input"
                @input="validateDelayInput"
              />
              <span>毫秒</span>
            </div>
          </div>
          <div class="input-group">
            <label>Cron表达�?/label>
            <input type="text" v-model="cronExpression" placeholder="请输入Cron表达�? />
          </div>
          <div class="checkbox-group">
            <input type="checkbox" id="taskVirtualIP" v-model="useVirtualIP" />
            <label for="taskVirtualIP">使用虚拟IP (中国IP)</label>
          </div>
        </div>
      </div>

      <div class="right-panel">
        <div class="card">
          <div class="card-header">
            <h2>任务设置</h2>
          </div>
          <div class="card-settings">
            <div class="settings-row">
              <div class="setting-item">
                <label>卡包�?线程�?/label>
                <input type="text" v-model="cardPackage" class="small-input" />
              </div>
              <div class="setting-item">
                <label>请求次数</label>
                <input type="text" v-model="times" class="small-input" />
              </div>
            </div>
            
            <div class="settings-row">
              <div class="setting-item timer-setting">
                <label>定时执行 (设定执行时间)</label>
                <div class="time-input-group">
                  <input 
                    type="text" 
                    v-model="targetHours" 
                    class="time-input" 
                    placeholder="�? 
                    @input="validateHours"
                    @focus="initTimeInput('hours')" 
                  />
                  <span>:</span>
                  <input 
                    type="text" 
                    v-model="targetMinutes" 
                    class="time-input" 
                    placeholder="�? 
                    @input="validateMinutes"
                    @focus="initTimeInput('minutes')" 
                  />
                  <span>:</span>
                  <input 
                    type="text" 
                    v-model="targetSeconds" 
                    class="time-input" 
                    placeholder="�? 
                    @input="validateSeconds"
                    @focus="initTimeInput('seconds')" 
                  />
                </div>
              </div>
            </div>
          </div>
          
          <div class="button-group">
            <button 
              @click="selectedTaskId ? updateTask() : saveCurrentAsTask()" 
              class="btn primary"
            >
              {{ selectedTaskId ? '更新任务' : '保存任务' }}
            </button>
            <button @click="activeTab = 'taskList'" class="btn">取消</button>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Save Task Modal -->
    <div class="modal" v-if="showSaveTaskModal">
      <div class="modal-content">
        <div class="modal-header">
          <h2>保存任务</h2>
          <button @click="showSaveTaskModal = false" class="close-btn">&times;</button>
        </div>
        <div class="modal-body">
          <div class="input-group">
            <label>任务名称</label>
            <input type="text" v-model="taskName" placeholder="请输入任务名�? />
          </div>
          <div class="input-group">
            <label>标签</label>
            <input type="text" v-model="taskTags" placeholder="多个标签用英文逗号分隔" />
          </div>
        </div>
        <div class="modal-footer">
          <button @click="saveCurrentAsTask" class="btn primary">保存</button>
          <button @click="showSaveTaskModal = false" class="btn">取消</button>
        </div>
      </div>
    </div>
    
    <!-- Delete Confirmation Modal -->
    <div class="modal" v-if="showConfirmDeleteModal">
      <div class="modal-content">
        <div class="modal-header">
          <h2>确认删除</h2>
          <button @click="showConfirmDeleteModal = false" class="close-btn">&times;</button>
        </div>
        <div class="modal-body">
          <p>确定要删除任�?"{{ currentTask?.name }}" 吗？此操作不可撤销�?/p>
        </div>
        <div class="modal-footer">
          <button @click="deleteTask" class="btn danger">删除</button>
          <button @click="showConfirmDeleteModal = false" class="btn">取消</button>
        </div>
      </div>
    </div>
    
    <!-- Import/Export Modal -->
    <div class="modal" v-if="showImportExportModal">
      <div class="modal-content">
        <div class="modal-header">
          <h2>{{ importExportMode === 'export' ? '导出任务' : '导入任务' }}</h2>
          <button @click="showImportExportModal = false" class="close-btn">&times;</button>
        </div>
        <div class="modal-body">
          <div class="input-group">
            <label>文件路径</label>
            <input type="text" v-model="importExportPath" :placeholder="importExportMode === 'export' ? '请输入导出文件路�? : '请输入导入文件路�?" />
          </div>
          
          <div v-if="importExportMode === 'export'" class="export-options">
            <div class="export-option-header">选择要导出的任务�?/div>
            
            <div class="export-filters">
              <div class="checkbox-group">
                <input type="checkbox" id="exportAllTasks" 
                  :checked="selectedExportTasks.length === Object.keys(tasks).length"
                  @change="toggleAllExportTasks" />
                <label for="exportAllTasks">全�?/label>
              </div>
              
              <div class="tag-filters">
                <div 
                  v-for="tag in availableTags" 
                  :key="tag" 
                  @click="toggleExportByTag(tag)"
                  class="tag-filter"
                >
                  {{ tag }}
                </div>
              </div>
            </div>
            
            <div class="export-task-list">
              <div 
                v-for="task in Object.values(tasks)" 
                :key="task.id" 
                class="export-task-item"
              >
                <div class="checkbox-group">
                  <input 
                    type="checkbox" 
                    :id="'export-task-' + task.id" 
                    :checked="selectedExportTasks.includes(task.id)"
                    @change="toggleExportTask(task.id)" />
                  <label :for="'export-task-' + task.id">{{ task.name }}</label>
                </div>
                <div class="task-tags">
                  <span v-for="tag in task.tags" :key="tag" class="tag">{{ tag }}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button 
            @click="importExportMode === 'export' ? exportSelectedTasksToFile() : importTasksFromFile()" 
            class="btn primary"
          >
            {{ importExportMode === 'export' ? '导出' : '导入' }}
          </button>
          <button @click="showImportExportModal = false" class="btn">取消</button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed, onMounted, onUnmounted, reactive, watch, nextTick } from 'vue';
import { SendRequest, ExecuteCardPackage, SaveTask, GetAllTasks, GetTaskByID, UpdateTask, DeleteTask, ExportTasks, ImportTasks, StartTask, StopTask, TestTask, ScheduleTask } from '../wailsjs/go/main/App';

// Types
interface Task {
  id: string;
  name: string;
  url: string;
  method: string;
  cookie: string;
  headers: string;
  data: string;
  useVirtualIP: boolean;
  times: number;
  threads: number;
  scheduledTime: string;
  delayMin: number;
  delayMax: number;
  tags: string[];
  createdAt: string;
  updatedAt: string;
  status: string;
  cronExpression?: string;

// Application state
const activeTab = ref('requestConfig'); // 'requestConfig', 'taskList', 'taskDetail'
const tasks = ref<Record<string, Task>>({});
const selectedTaskId = ref<string | null>(null);
const showSaveTaskModal = ref(false);
const showConfirmDeleteModal = ref(false);
const showImportExportModal = ref(false);
const importExportMode = ref<'import' | 'export'>('export');
const importExportPath = ref('');
const isFileBrowserOpen = ref(false);

// State variables for request configuration
const url = ref('');
const visitMethod = ref('GET');
const ck = ref('');
const headers = ref('');
const useVirtualIP = ref(true);
const submitData = ref('');
const rawData = ref('');
const cardPackage = ref('5');
const times = ref('10');
const outputLog = ref('');
const executionInProgress = ref(false);
const currentTime = ref(new Date());
const timerTick = ref(0);
const taskName = ref('');
const taskTags = ref('');
const delayMin = ref('0');
const delayMax = ref('0');
const hasRemovedGzipHeader = ref(false);
const cronExpression = ref('');
const logScrollBottom = ref(true);
const outputLogRef = ref<HTMLTextAreaElement | null>(null);
const runningTaskId = ref<string | null>(null);
const selectedExportTasks = ref<string[]>([]);

// Task filter
const taskFilter = ref('');
const selectedTags = ref<string[]>([]);
const availableTags = computed(() => {
  const tagsSet = new Set<string>();
  Object.values(tasks.value).forEach(task => {
    task.tags.forEach(tag => tagsSet.add(tag));
  });
  return Array.from(tagsSet).sort();
});

const filteredTasks = computed(() => {
  const filter = taskFilter.value.toLowerCase();
  const tasksArray = Object.values(tasks.value);
  
  return tasksArray.filter(task => {
    // Filter by search text
    const matchesFilter = 
      task.name.toLowerCase().includes(filter) ||
      task.url.toLowerCase().includes(filter);
    
    // Filter by selected tags
    const matchesTags = selectedTags.value.length === 0 || 
      selectedTags.value.some(tag => task.tags.includes(tag));
    
    return matchesFilter && matchesTags;
  }).sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());
});

// Current task in edit mode
const currentTask = computed(() => {
  if (!selectedTaskId.value || !tasks.value[selectedTaskId.value]) {
    return null;
  }
  return tasks.value[selectedTaskId.value];
});

// Multiple scheduled tasks
const scheduledTasks = ref<string[]>([]);

// Timer functionality
const timerRunning = ref(false);
const timerActive = ref(false);
const taskStartTime = ref<Date | null>(null);
const taskEndTime = ref<Date | null>(null);
const taskDuration = ref(0);
const taskDurationMs = ref(0);

// Time input for scheduled timer (target time)
const targetHours = ref('');
const targetMinutes = ref('');
const targetSeconds = ref('');

// Current time display with milliseconds
const currentTimeDisplay = computed(() => {
  const h = currentTime.value.getHours().toString().padStart(2, '0');
  const m = currentTime.value.getMinutes().toString().padStart(2, '0');
  const s = currentTime.value.getSeconds().toString().padStart(2, '0');
  return `${h}:${m}:${s}`;
});

// Format task duration with milliseconds
const formattedTaskDuration = computed(() => {
  // For short durations, just show milliseconds
  if (taskDurationMs.value < 1000) {
    return `${taskDurationMs.value}ms`;
  }
  
  // For longer durations, format as needed
  const totalSeconds = Math.floor(taskDurationMs.value / 1000);
  const ms = taskDurationMs.value % 1000;
  
  if (totalSeconds < 60) {
    // Less than a minute: show as seconds.milliseconds
    return `${totalSeconds}.${ms.toString().padStart(3, '0')}s`;
  } else if (totalSeconds < 3600) {
    // Less than an hour: show as minutes:seconds.milliseconds
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;
    return `${minutes}:${seconds.toString().padStart(2, '0')}.${ms.toString().padStart(3, '0')}`;
  } else {
    // More than an hour: show full format
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = totalSeconds % 60;
    return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}.${ms.toString().padStart(3, '0')}`;
  }
});

// Target time for scheduled execution
const targetTimeDisplay = computed(() => {
  const h = targetHours.value.padStart(2, '0');
  const m = targetMinutes.value.padStart(2, '0');
  const s = targetSeconds.value.padStart(2, '0');
  return `${h}:${m}:${s}`;
});

// Calculate time remaining until target time
const timeRemainingDisplay = computed(() => {
  if (!timerActive.value) return "00:00:00";
  
  // Include timerTick in the dependency to force updates
  timerTick.value;
  
  const now = new Date();
  const targetTime = new Date();
  
  const h = parseInt(targetHours.value) || 0;
  const m = parseInt(targetMinutes.value) || 0;
  const s = parseInt(targetSeconds.value) || 0;
  
  targetTime.setHours(h, m, s, 0);
  
  // If target time is earlier than current time, set it to tomorrow
  if (targetTime < now) {
    targetTime.setDate(targetTime.getDate() + 1);
  }
  
  const diffMs = targetTime.getTime() - now.getTime();
  const diffSec = Math.floor(diffMs / 1000);
  
  const hours = Math.floor(diffSec / 3600).toString().padStart(2, '0');
  const minutes = Math.floor((diffSec % 3600) / 60).toString().padStart(2, '0');
  const seconds = (diffSec % 60).toString().padStart(2, '0');
  
  return `${hours}:${minutes}:${seconds}`;
});

let clockInterval: number | null = null;

// Update current time every 100ms for more accurate timing
onMounted(() => {
  // Initialize time inputs with current time
  const now = new Date();
  targetHours.value = now.getHours().toString().padStart(2, '0');
  targetMinutes.value = now.getMinutes().toString().padStart(2, '0');
  targetSeconds.value = now.getSeconds().toString().padStart(2, '0');
  
  clockInterval = setInterval(() => {
    currentTime.value = new Date();
    timerTick.value++; // Increment the timer tick to trigger recomputation
    checkScheduledTasks();
  }, 100) as unknown as number;
  
  // Load all saved tasks
  loadTasks();
});

// Validate and initialize time input fields
function initTimeInput(field: 'hours' | 'minutes' | 'seconds') {
  if (timerActive.value) return;
  
  // Set default value to current time if empty
  const now = new Date();
  if (field === 'hours' && targetHours.value === '') {
    targetHours.value = now.getHours().toString().padStart(2, '0');
  } else if (field === 'minutes' && targetMinutes.value === '') {
    targetMinutes.value = now.getMinutes().toString().padStart(2, '0');
  } else if (field === 'seconds' && targetSeconds.value === '') {
    targetSeconds.value = now.getSeconds().toString().padStart(2, '0');
  }

function validateHours() {
  if (timerActive.value) return;
  
  // Remove non-digit characters
  targetHours.value = targetHours.value.replace(/\D/g, '');
  
  // Ensure value is a valid hour (0-23)
  const hours = parseInt(targetHours.value);
  if (isNaN(hours)) {
    targetHours.value = '00';
  } else if (hours > 23) {
    targetHours.value = '23';
  } else {
    targetHours.value = hours.toString().padStart(2, '0');
  }

function validateMinutes() {
  if (timerActive.value) return;
  
  // Remove non-digit characters
  targetMinutes.value = targetMinutes.value.replace(/\D/g, '');
  
  // Ensure value is a valid minute (0-59)
  const minutes = parseInt(targetMinutes.value);
  if (isNaN(minutes)) {
    targetMinutes.value = '00';
  } else if (minutes > 59) {
    targetMinutes.value = '59';
  } else {
    targetMinutes.value = minutes.toString().padStart(2, '0');
  }

function validateSeconds() {
  if (timerActive.value) return;
  
  // Remove non-digit characters
  targetSeconds.value = targetSeconds.value.replace(/\D/g, '');
  
  // Ensure value is a valid second (0-59)
  const seconds = parseInt(targetSeconds.value);
  if (isNaN(seconds)) {
    targetSeconds.value = '00';
  } else if (seconds > 59) {
    targetSeconds.value = '59';
  } else {
    targetSeconds.value = seconds.toString().padStart(2, '0');
  }

// Validate delay input fields
function validateDelayInput() {
  // Remove non-digit characters
  delayMin.value = delayMin.value.replace(/\D/g, '');
  delayMax.value = delayMax.value.replace(/\D/g, '');
  
  // Ensure values are valid
  const min = parseInt(delayMin.value);
  const max = parseInt(delayMax.value);
  
  if (isNaN(min)) {
    delayMin.value = '0';
  }
  
  if (isNaN(max)) {
    delayMax.value = '0';
  } else if (max < min) {
    delayMax.value = delayMin.value;
  }

// Load all tasks from the backend
async function loadTasks() {
  try {
    const allTasks = await GetAllTasks();
    tasks.value = allTasks;
  } catch (error) {
    outputLog.value += getCurrentTime() + ` 加载任务失败: ${error}\n`;
  }

// Save current configuration as a task
async function saveCurrentAsTask() {
  if (!url.value) {
    outputLog.value += getCurrentTime() + " 错误: 保存任务需�?URL\n";
    return;
  }
  
  if (!taskName.value) {
    outputLog.value += getCurrentTime() + " 错误: 请输入任务名称\n";
    return;
  }
  
  // Parse tags
  const tags = taskTags.value.split(',')
    .map(tag => tag.trim())
    .filter(tag => tag !== '');
  
  // Create scheduled time string
  const scheduledTime = `${targetHours.value}:${targetMinutes.value}:${targetSeconds.value}`;
  
  try {
    const result = await SaveTask(
      taskName.value,
      url.value,
      visitMethod.value,
      ck.value,
      submitData.value,
      headers.value,
      useVirtualIP.value,
      parseInt(times.value),
      parseInt(cardPackage.value),
      scheduledTime,
      parseInt(delayMin.value),
      parseInt(delayMax.value),
      tags
    );
    
    outputLog.value += getCurrentTime() + ` ${result}\n`;
    showSaveTaskModal.value = false;
    
    // Reload tasks
    await loadTasks();
    
    // Switch to task list view
    activeTab.value = 'taskList';
  } catch (error) {
    outputLog.value += getCurrentTime() + ` 保存任务失败: ${error}\n`;
  }

// Update an existing task
async function updateTask() {
  if (!selectedTaskId.value) return;
  
  // Parse tags
  const tags = taskTags.value.split(',')
    .map(tag => tag.trim())
    .filter(tag => tag !== '');
  
  // Create scheduled time string
  const scheduledTime = `${targetHours.value}:${targetMinutes.value}:${targetSeconds.value}`;
  
  try {
    const result = await UpdateTask(
      selectedTaskId.value,
      taskName.value,
      url.value,
      visitMethod.value,
      ck.value,
      submitData.value,
      headers.value,
      useVirtualIP.value,
      parseInt(times.value),
      parseInt(cardPackage.value),
      scheduledTime,
      parseInt(delayMin.value),
      parseInt(delayMax.value),
      tags
    );
    
    outputLog.value += getCurrentTime() + ` ${result}\n`;
    
    // Reload tasks
    await loadTasks();
    
    // Switch to task list view
    activeTab.value = 'taskList';
  } catch (error) {
    outputLog.value += getCurrentTime() + ` 更新任务失败: ${error}\n`;
  }

// Delete a task
async function deleteTask() {
  if (!selectedTaskId.value) return;
  
  try {
    const result = await DeleteTask(selectedTaskId.value);
    outputLog.value += getCurrentTime() + ` ${result}\n`;
    
    // Remove from scheduled tasks if it's there
    const index = scheduledTasks.value.indexOf(selectedTaskId.value);
    if (index !== -1) {
      scheduledTasks.value.splice(index, 1);
    }
    
    // Reload tasks
    await loadTasks();
    
    // Close confirm modal and switch to task list
    showConfirmDeleteModal.value = false;
    activeTab.value = 'taskList';
    selectedTaskId.value = null;
  } catch (error) {
    outputLog.value += getCurrentTime() + ` 删除任务失败: ${error}\n`;
  }

// Load task details into form
function loadTaskToForm(taskId: string) {
  const task = tasks.value[taskId];
  if (!task) return;
  
  taskName.value = task.name;
  url.value = task.url;
  visitMethod.value = task.method;
  ck.value = task.cookie;
  headers.value = task.headers;
  submitData.value = task.data;
  useVirtualIP.value = task.useVirtualIP;
  times.value = task.times.toString();
  cardPackage.value = task.threads.toString();
  taskTags.value = task.tags.join(', ');
  delayMin.value = task.delayMin.toString();
  delayMax.value = task.delayMax.toString();
  hasRemovedGzipHeader.value = false;
  
  // Parse scheduled time
  const timeParts = task.scheduledTime.split(':');
  if (timeParts.length === 3) {
    targetHours.value = timeParts[0];
    targetMinutes.value = timeParts[1];
    targetSeconds.value = timeParts[2];
  }
  
  selectedTaskId.value = taskId;
  activeTab.value = 'taskDetail';

// Create a new task
function createNewTask() {
  // Reset form
  taskName.value = '';
  url.value = '';
  visitMethod.value = 'GET';
  ck.value = '';
  headers.value = '';
  submitData.value = '';
  useVirtualIP.value = true;
  times.value = '10';
  cardPackage.value = '5';
  taskTags.value = '';
  delayMin.value = '0';
  delayMax.value = '0';
  hasRemovedGzipHeader.value = false;
  
  // Initialize time inputs with current time
  const now = new Date();
  targetHours.value = now.getHours().toString().padStart(2, '0');
  targetMinutes.value = now.getMinutes().toString().padStart(2, '0');
  targetSeconds.value = now.getSeconds().toString().padStart(2, '0');
  
  selectedTaskId.value = null;
  activeTab.value = 'taskDetail';

// Add a task to scheduled tasks
function scheduleTask(taskId: string) {
  if (!scheduledTasks.value.includes(taskId)) {
    scheduledTasks.value.push(taskId);
    outputLog.value += getCurrentTime() + ` 已添加任务到定时队列: ${tasks.value[taskId].name}\n`;
  }

// Remove a task from scheduled tasks
function unscheduleTask(taskId: string) {
  const index = scheduledTasks.value.indexOf(taskId);
  if (index !== -1) {
    scheduledTasks.value.splice(index, 1);
    outputLog.value += getCurrentTime() + ` 已从定时队列移除任务: ${tasks.value[taskId].name}\n`;
  }

// Toggle selection of a task for export
function toggleExportTask(taskId: string) {
  const index = selectedExportTasks.value.indexOf(taskId);
  if (index === -1) {
    selectedExportTasks.value.push(taskId);
  } else {
    selectedExportTasks.value.splice(index, 1);
  }

// Toggle all tasks for export
function toggleAllExportTasks(event: Event) {
  const checked = (event.target as HTMLInputElement).checked;
  if (checked) {
    // Select all tasks
    selectedExportTasks.value = Object.keys(tasks.value);
  } else {
    // Deselect all tasks
    selectedExportTasks.value = [];
  }

// Toggle export selection by tag
function toggleExportByTag(tag: string) {
  // Find all tasks with this tag
  const tasksWithTag = Object.values(tasks.value).filter(task => task.tags.includes(tag));
  const taskIds = tasksWithTag.map(task => task.id);
  
  // Check if all tasks with this tag are already selected
  const allSelected = taskIds.every(id => selectedExportTasks.value.includes(id));
  
  if (allSelected) {
    // Deselect all tasks with this tag
    selectedExportTasks.value = selectedExportTasks.value.filter(id => !taskIds.includes(id));
  } else {
    // Select all tasks with this tag (avoid duplicates)
    const newSelection = [...new Set([...selectedExportTasks.value, ...taskIds])];
    selectedExportTasks.value = newSelection;
  }

// Export selected tasks to a file
async function exportSelectedTasksToFile() {
  if (!importExportPath.value) {
    outputLog.value += getCurrentTime() + " 错误: 请输入导出文件路径\n";
    return;
  }
  
  if (selectedExportTasks.value.length === 0) {
    outputLog.value += getCurrentTime() + " 错误: 请选择至少一个要导出的任务\n";
    return;
  }
  
  try {
    // Create a subset of tasks to export
    const tasksToExport: Record<string, Task> = {};
    selectedExportTasks.value.forEach(id => {
      if (tasks.value[id]) {
        tasksToExport[id] = tasks.value[id];
      }
    });
    
    // Convert to JSON
    const tasksJSON = JSON.stringify(tasksToExport, null, 2);
    
    // Write to file
    const result = await ExportTasks(importExportPath.value);
    outputLog.value += getCurrentTime() + ` ${result}\n`;
    showImportExportModal.value = false;
  } catch (error) {
    outputLog.value += getCurrentTime() + ` 导出任务失败: ${error}\n`;
  }

// Import tasks from a file
async function importTasksFromFile() {
  if (!importExportPath.value) {
    outputLog.value += getCurrentTime() + " 错误: 请输入导入文件路径\n";
    return;
  }
  
  try {
    const result = await ImportTasks(importExportPath.value);
    outputLog.value += getCurrentTime() + ` ${result}\n`;
    showImportExportModal.value = false;
    
    // Reload tasks
    await loadTasks();
  } catch (error) {
    outputLog.value += getCurrentTime() + ` 导入任务失败: ${error}\n`;
  }

// Check if any scheduled tasks need to be executed
function checkScheduledTasks() {
  if (scheduledTasks.value.length === 0) return;
  
  const now = new Date();
  const h = now.getHours();
  const m = now.getMinutes();
  const s = now.getSeconds();
  
  // Check each scheduled task
  for (let i = scheduledTasks.value.length - 1; i >= 0; i--) {
    const taskId = scheduledTasks.value[i];
    const task = tasks.value[taskId];
    
    if (!task) {
      // Task doesn't exist anymore, remove it
      scheduledTasks.value.splice(i, 1);
      continue;
    }
    
    // Parse scheduled time
    const timeParts = task.scheduledTime.split(':');
    if (timeParts.length !== 3) continue;
    
    const targetH = parseInt(timeParts[0]) || 0;
    const targetM = parseInt(timeParts[1]) || 0;
    const targetS = parseInt(timeParts[2]) || 0;
    
    if (h === targetH && m === targetM && s === targetS) {
      // Time matches, execute the task
      outputLog.value += getCurrentTime() + ` 执行定时任务: ${task.name}\n`;
      
      // Remove from scheduled tasks to prevent duplicate execution
      scheduledTasks.value.splice(i, 1);
      
      // Execute the task
      executeTask(taskId);
    }
  }

// Execute a task by ID
async function executeTask(taskId: string) {
  const task = tasks.value[taskId];
  if (!task) {
    outputLog.value += getCurrentTime() + ` 错误: 找不到任�?${taskId}\n`;
    return;
  }
  
  // Don't start if a task is already running
  if (runningTaskId.value) {
    outputLog.value += getCurrentTime() + ` 错误: 已有任务正在执行，请先停止\n`;
    return;
  }
  
  runningTaskId.value = taskId;
  task.status = 'running';
  
  // Start the task timer
  const timerIntervalId = startTaskTimer();
  
  outputLog.value += getCurrentTime() + ` 开始执行任�? ${task.name}\n`;
  executionInProgress.value = true;
  
  try {
    // Execute the task
    const result = await StartTask(taskId);
    
    // Update the output log
    outputLog.value += getCurrentTime() + ` ${result}\n`;
    
    // Poll for task status updates
    const statusInterval = setInterval(async () => {
      // Get the latest task data
      const updatedTask = await GetTaskByID(taskId);
      
      // Update the task in our list
      if (updatedTask) {
        tasks.value[taskId] = updatedTask;
        
        // If task is no longer running, clear the interval
        if (updatedTask.status !== 'running') {
          clearInterval(statusInterval);
          runningTaskId.value = null;
          executionInProgress.value = false;
          stopTaskTimer(timerIntervalId);
          outputLog.value += getCurrentTime() + ` 任务 ${task.name} 完成，总耗时: ${formattedTaskDuration.value}\n`;
        }
      }
    }, 500);
    
  } catch (error) {
    outputLog.value += getCurrentTime() + ` 错误: ${error}\n`;
    stopTaskTimer(timerIntervalId);
    runningTaskId.value = null;
    executionInProgress.value = false;
  }

// Stop the currently running task
async function stopRunningTask() {
  if (!runningTaskId.value) {
    outputLog.value += getCurrentTime() + ` 没有正在执行的任务\n`;
    return;
  }
  
  try {
    const taskId = runningTaskId.value;
    const task = tasks.value[taskId];
    
    // Call the backend to stop the task
    const result = await StopTask(taskId);
    
    // Update the output log
    outputLog.value += getCurrentTime() + ` ${result}\n`;
    
    // Reset state
    task.status = 'stopped';
    
  } catch (error) {
    outputLog.value += getCurrentTime() + ` 停止任务失败: ${error}\n`;
  }

// Test task parameters without saving
async function testTaskParameters() {
  if (!url.value) {
    outputLog.value += getCurrentTime() + " 错误: URL不能为空\n";
    return;
  }
  
  // Don't start if a task is already running
  if (runningTaskId.value || executionInProgress.value) {
    outputLog.value += getCurrentTime() + ` 错误: 已有任务正在执行，请先停止\n`;
    return;
  }
  
  const timesNum = parseInt(times.value);
  const threadsNum = parseInt(cardPackage.value);
  const delayMinNum = parseInt(delayMin.value);
  const delayMaxNum = parseInt(delayMax.value);
  
  if (isNaN(timesNum) || timesNum <= 0) {
    outputLog.value += getCurrentTime() + " 错误: 次数必须是正整数\n";
    return;
  }
  
  if (isNaN(threadsNum) || threadsNum <= 0) {
    outputLog.value += getCurrentTime() + " 错误: 卡包�?线程数必须是正整数\n";
    return;
  }
  
  if (isNaN(delayMinNum) || delayMinNum < 0) {
    outputLog.value += getCurrentTime() + " 错误: 最小延迟必须是非负整数\n";
    return;
  }
  
  if (isNaN(delayMaxNum) || delayMaxNum < 0) {
    outputLog.value += getCurrentTime() + " 错误: 最大延迟必须是非负整数\n";
    return;
  }
  
  // Start the task timer
  const timerIntervalId = startTaskTimer();
  
  outputLog.value += getCurrentTime() + ` 开始测试任务参数，次数: ${timesNum}, 卡包�?线程�? ${threadsNum}, 延迟: ${delayMinNum}-${delayMaxNum}ms\n`;
  executionInProgress.value = true;
  
  try {
    // Execute test task
    const result = await TestTask(
      url.value, 
      visitMethod.value, 
      ck.value, 
      submitData.value,
      headers.value,
      useVirtualIP.value, 
      timesNum,
      threadsNum,
      delayMinNum,
      delayMaxNum
    );
    
    // Update the output log
    outputLog.value += result + "\n";
    
    // Stop the timer and log completion with millisecond precision
    stopTaskTimer(timerIntervalId);
    outputLog.value += getCurrentTime() + ` 测试完成，总耗时: ${formattedTaskDuration.value}\n`;
  } catch (error) {
    outputLog.value += getCurrentTime() + ` 错误: ${error}\n`;
    stopTaskTimer(timerIntervalId);
  } finally {
    executionInProgress.value = false;
  }

// Schedule task with cron expression
async function scheduleTaskWithCron(taskId: string) {
  const task = tasks.value[taskId];
  if (!task) {
    outputLog.value += getCurrentTime() + ` 错误: 找不到任�?${taskId}\n`;
    return;
  }
  
  if (!task.cronExpression) {
    outputLog.value += getCurrentTime() + ` 错误: 请先设置Cron表达式\n`;
    return;
  }
  
  try {
    // Schedule the task with cron
    const result = await ScheduleTask(taskId, task.cronExpression);
    
    // Update the output log
    outputLog.value += getCurrentTime() + ` ${result}\n`;
    
    // Add to scheduled tasks
    if (!scheduledTasks.value.includes(taskId)) {
      scheduledTasks.value.push(taskId);
    }
  } catch (error) {
    outputLog.value += getCurrentTime() + ` 定时任务设置失败: ${error}\n`;
  }

function startTaskTimer() {
  taskStartTime.value = new Date();
  taskDuration.value = 0;
  taskDurationMs.value = 0;
  timerRunning.value = true;
  
  // Start updating the task duration every 10ms for millisecond precision
  const intervalId = setInterval(() => {
    if (taskStartTime.value) {
      const now = new Date();
      const elapsedMs = now.getTime() - taskStartTime.value.getTime();
      taskDurationMs.value = elapsedMs;
      taskDuration.value = Math.floor(elapsedMs / 1000);
    }
  }, 10);
  
  return intervalId;

function stopTaskTimer(intervalId: number) {
  clearInterval(intervalId);
  taskEndTime.value = new Date();
  
  // Calculate final duration
  if (taskStartTime.value && taskEndTime.value) {
    taskDurationMs.value = taskEndTime.value.getTime() - taskStartTime.value.getTime();
    taskDuration.value = Math.floor(taskDurationMs.value / 1000);
  }
  
  timerRunning.value = false;

function toggleScheduledTimer() {
  if (timerActive.value) {
    // Cancel scheduled timer
    timerActive.value = false;
    executionInProgress.value = false;
    outputLog.value += getCurrentTime() + " 已取消定时执行\n";
  } else {
    // Start scheduled timer with validation
    validateHours();
    validateMinutes();
    validateSeconds();
    
    const h = parseInt(targetHours.value) || 0;
    const m = parseInt(targetMinutes.value) || 0;
    const s = parseInt(targetSeconds.value) || 0;
    
    // Ensure we have valid time values
    targetHours.value = h.toString().padStart(2, '0');
    targetMinutes.value = m.toString().padStart(2, '0');
    targetSeconds.value = s.toString().padStart(2, '0');
    
    timerActive.value = true;
    executionInProgress.value = true;
    
    outputLog.value += getCurrentTime() + ` 已设置定时执行，执行时间: ${targetTimeDisplay.value}\n`;
  }

function getCurrentTime() {
  const now = new Date();
  const h = now.getHours().toString().padStart(2, '0');
  const m = now.getMinutes().toString().padStart(2, '0');
  const s = now.getSeconds().toString().padStart(2, '0');
  const ms = now.getMilliseconds().toString().padStart(3, '0');
  return `[${h}:${m}:${s}.${ms}]`;

async function startCardPackage() {
  if (!url.value) {
    outputLog.value += getCurrentTime() + " 错误: URL不能为空\n";
    executionInProgress.value = false;
    return;
  }
  
  const timesNum = parseInt(times.value);
  const threadsNum = parseInt(cardPackage.value);
  const delayMinNum = parseInt(delayMin.value);
  const delayMaxNum = parseInt(delayMax.value);
  
  if (isNaN(timesNum) || timesNum <= 0) {
    outputLog.value += getCurrentTime() + " 错误: 次数必须是正整数\n";
    executionInProgress.value = false;
    return;
  }
  
  if (isNaN(threadsNum) || threadsNum <= 0) {
    outputLog.value += getCurrentTime() + " 错误: 卡包�?线程数必须是正整数\n";
    executionInProgress.value = false;
    return;
  }
  
  if (isNaN(delayMinNum) || delayMinNum < 0) {
    outputLog.value += getCurrentTime() + " 错误: 最小延迟必须是非负整数\n";
    executionInProgress.value = false;
    return;
  }
  
  if (isNaN(delayMaxNum) || delayMaxNum < 0) {
    outputLog.value += getCurrentTime() + " 错误: 最大延迟必须是非负整数\n";
    executionInProgress.value = false;
    return;
  }
  
  // Start the task timer
  const timerIntervalId = startTaskTimer();
  
  outputLog.value += getCurrentTime() + ` 开始卡包操作，次数: ${timesNum}, 卡包�?线程�? ${threadsNum}, 延迟: ${delayMinNum}-${delayMaxNum}ms\n`;
  executionInProgress.value = true;
  
  try {
    // Execute the card package operation with delay parameters
    const result = await ExecuteCardPackage(
      url.value, 
      visitMethod.value, 
      ck.value, 
      submitData.value,
      headers.value,
      useVirtualIP.value, 
      timesNum,
      threadsNum,
      delayMinNum,
      delayMaxNum
    );
    
    // Update the output log
    outputLog.value += result + "\n";
    
    // Stop the timer and log completion with millisecond precision
    stopTaskTimer(timerIntervalId);
    outputLog.value += getCurrentTime() + ` 卡包操作完成，总耗时: ${formattedTaskDuration.value}\n`;
  } catch (error) {
    outputLog.value += getCurrentTime() + ` 错误: ${error}\n`;
    stopTaskTimer(timerIntervalId);
  } finally {
    executionInProgress.value = false;
  }

function parseRawData() {
  try {
    const raw = rawData.value.trim();
    if (!raw) {
      outputLog.value += getCurrentTime() + " 错误: 原始数据为空\n";
      return;
    }
    
    // Reset gzip header notification
    hasRemovedGzipHeader.value = false;
    
    // Parse the raw data
    const lines = raw.split('\n');
    const firstLine = lines[0].trim();
    
    // Extract method and URL
    const methodUrlMatch = firstLine.match(/^(\w+)\s+(\S+)/);
    let extractedUrl = '';
    let extractedMethod = '';
    
    if (methodUrlMatch) {
      extractedMethod = methodUrlMatch[1];
      visitMethod.value = extractedMethod;
      
      // Extract URL - handle both full URLs and relative paths
      extractedUrl = methodUrlMatch[2];
      if (!extractedUrl.startsWith('http')) {
        // Try to find Host header
        const hostLine = lines.find(line => line.toLowerCase().startsWith('host:'));
        if (hostLine) {
          const host = hostLine.split(':', 2)[1].trim();
          extractedUrl = `http://${host}${extractedUrl}`;
        }
      }
      url.value = extractedUrl;
    }
    
    // Extract headers
    let extractedHeaders = '';
    let cookieValue = '';
    let headerStarted = false;
    let hasRemovedGzip = false;
    
    // Find blank line that separates headers from body
    let bodyStartIndex = -1;
    
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i].trim();
      
      if (line === '') {
        bodyStartIndex = i;
        break;
      }
      
      if (line.toLowerCase().startsWith('host:')) {
        headerStarted = true;
      }
      
      if (headerStarted) {
        if (line.toLowerCase().startsWith('cookie:')) {
          cookieValue = line.substring(line.indexOf(':') + 1).trim();
          ck.value = cookieValue;
          // Skip adding cookie to headers
        } else if (line.toLowerCase().startsWith('accept-encoding:') && 
                  line.toLowerCase().includes('gzip')) {
          // Skip this header and mark it as removed
          hasRemovedGzip = true;
          hasRemovedGzipHeader.value = true;
        } else {
          extractedHeaders += line + '\n';
        }
      }
    }
    
    headers.value = extractedHeaders;
    
    // Extract body data
    if (bodyStartIndex !== -1 && bodyStartIndex < lines.length - 1) {
      submitData.value = lines.slice(bodyStartIndex + 1).join('\n');
    }
    
    // Log the parsed data
    outputLog.value += getCurrentTime() + " 原始数据解析成功\n";
    if (hasRemovedGzip) {
      outputLog.value += getCurrentTime() + " 自动移除了包�?gzip �?Accept-Encoding 协议头\n";
    }
    outputLog.value += getCurrentTime() + " 解析结果:\n";
    outputLog.value += `  网址: ${extractedUrl}\n`;
    outputLog.value += `  方式: ${extractedMethod}\n`;
    if (cookieValue) {
      outputLog.value += `  Cookie: ${cookieValue.length > 50 ? cookieValue.substring(0, 50) + '...' : cookieValue}\n`;
    }
    if (extractedHeaders) {
      outputLog.value += `  协议�? ${extractedHeaders.split('\n').length} 行\n`;
    }
    if (submitData.value) {
      outputLog.value += `  提交数据: ${submitData.value.length > 50 ? submitData.value.substring(0, 50) + '...' : submitData.value}\n`;
    }
  } catch (error) {
    outputLog.value += getCurrentTime() + ` 解析错误: ${error}\n`;
  }

function clearLog() {
  outputLog.value = '';

// Filter tasks by tag
function toggleTagFilter(tag: string) {
  const index = selectedTags.value.indexOf(tag);
  if (index === -1) {
    selectedTags.value.push(tag);
  } else {
    selectedTags.value.splice(index, 1);
  }

// Auto-scroll log to bottom when content changes
watch(outputLog, () => {
  if (logScrollBottom.value && outputLogRef.value) {
    // Use nextTick to ensure DOM has updated
    nextTick(() => {
      if (outputLogRef.value) {
        outputLogRef.value.scrollTop = outputLogRef.value.scrollHeight;
      }
    });
  }
});

// Clean up intervals when component is unmounted
onUnmounted(() => {
  if (clockInterval) {
    clearInterval(clockInterval);
  }
});




  max-height: 200px;


</script>

<style>
:root {
  --primary-color: #1976d2;
  --primary-light: #e3f2fd;
  --primary-dark: #0d47a1;
  --secondary-color: #e0f7fa;
  --text-color: #333;
  --light-gray: #f5f5f5;
  --border-color: #ddd;
  --danger-color: #f44336;
  --success-color: #4caf50;
  --warning-color: #ff9800;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

.container {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  width: 100%;
  height: 100vh;
  display: flex;
  flex-direction: column;
  background-color: var(--light-gray);
  color: var(--text-color);
  overflow: hidden;
}

.nav-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 15px;
  background-color: white;
  border-bottom: 1px solid var(--border-color);
  box-shadow: 0 1px 3px rgba(0,0,0,0.1);
}

.nav-tabs {
  display: flex;
  gap: 10px;
}

.nav-tab {
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s, transform 0.1s;
  background-color: #e0e0e0;
  color: var(--text-color);
  position: relative;
}

.nav-tab.active {
  background-color: var(--primary-color);
  color: white;
}

.nav-tab:hover:not(.active) {
  background-color: #d0d0d0;
}

.badge {
  position: absolute;
  top: -5px;
  right: -5px;
  background-color: var(--danger-color);
  color: white;
  border-radius: 50%;
  width: 20px;
  height: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.7rem;
  font-weight: bold;
}

.content {
  display: flex;
  flex: 1;
  padding: 15px;
  gap: 15px;
  overflow: hidden;
  height: calc(100vh - 60px);
}

.left-panel, .right-panel {
  display: flex;
  flex-direction: column;
  flex: 1;
  gap: 15px;
  overflow-y: auto;
  height: 100%;
}

.card {
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  padding: 15px;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-bottom: 10px;
  border-bottom: 1px solid var(--border-color);
}

.card-header h2 {
  font-size: 1rem;
  font-weight: 500;
  color: var(--primary-color);
  margin: 0;
}

.current-time {
  font-family: monospace;
  font-size: 1rem;
  font-weight: bold;
  color: var(--primary-dark);
  background-color: var(--primary-light);
  padding: 4px 8px;
  border-radius: 4px;
}

.input-group {
  display: flex;
  align-items: center;
  gap: 10px;
}

.input-group label {
  width: 80px;
  text-align: right;
  color: var(--primary-color);
  font-weight: 500;
}

.input-group input[type="text"], 
.input-group select,
.input-group textarea {
  flex: 1;
  border: 1px solid var(--border-color);
  padding: 8px 10px;
  border-radius: 4px;
  font-size: 0.9rem;
  transition: border-color 0.2s;
}

.input-group input[type="text"]:focus, 
.input-group select:focus,
.input-group textarea:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 2px rgba(25, 118, 210, 0.2);
}

.headers-input {
  height: 80px;
  font-family: monospace;
  resize: none;
}

.checkbox-group {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-left: 90px;
}

.checkbox-group input[type="checkbox"] {
  width: 16px;
  height: 16px;
  accent-color: var(--primary-color);
}

.small-input {
  width: 80px !important;
  flex: none !important;
  text-align: center;
}

.delay-inputs {
  display: flex;
  align-items: center;
  gap: 5px;
}

.time-input-group {
  display: flex;
  align-items: center;
  gap: 5px;
}

.time-input {
  width: 40px !important;
  text-align: center;
}

.raw-data-card {
  display: flex;
  flex-direction: column;
  flex: 1;
  min-height: 200px;
}

.raw-data-container {
  flex: 1;
  display: flex;
  flex-direction: column;
  height: 100%;
}

.raw-data {
  width: 100%;
  height: 100%;
  min-height: 150px;
  border: 1px solid var(--border-color);
  padding: 10px;
  border-radius: 4px;
  font-family: monospace;
  resize: none;
}

.card-settings {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.settings-row {
  display: flex;
  gap: 15px;
  justify-content: space-between;
}

.setting-item {
  display: flex;
  flex-direction: column;
  gap: 5px;
  flex: 1;
}

.timer-setting {
  flex: 2;
}

.setting-item label {
  font-size: 0.85rem;
  color: var(--text-color);
}

.button-group {
  display: flex;
  gap: 10px;
  margin-top: 10px;
}

.btn {
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s, transform 0.1s;
  background-color: #e0e0e0;
  color: var(--text-color);
}

.btn:hover:not(:disabled) {
  background-color: #d0d0d0;
  transform: translateY(-1px);
}

.btn:active:not(:disabled) {
  transform: translateY(1px);
}

.btn.primary {
  background-color: var(--primary-color);
  color: white;
}

.btn.primary:hover:not(:disabled) {
  background-color: var(--primary-dark);
}

.btn.warning {
  background-color: var(--warning-color);
  color: white;
}

.btn.danger {
  background-color: var(--danger-color);
  color: white;
}

.btn.danger:hover:not(:disabled) {
  background-color: #d32f2f;
}

.btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.timer-display {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 5px;
  margin-top: 10px;
  padding: 10px;
  border-radius: 4px;
  background-color: var(--light-gray);
  font-family: monospace;
}

.timer-display.active {
  background-color: var(--primary-light);
  border: 1px solid var(--primary-color);
}

.countdown {
  font-weight: bold;
  color: var(--primary-dark);
}

.time-remaining {
  font-size: 0.9em;
  color: var(--text-color);
  opacity: 0.8;
}

.output-card {
  flex: 1;
  display: flex;
  flex-direction: column;
  min-height: 300px;
}

.output-area {
  flex: 1;
  margin-top: 10px;
  display: flex;
  flex-direction: column;
  height: 100%;
}

.output-area textarea {
  width: 100%;
  height: 100%;
  min-height: 200px;
  border: 1px solid var(--border-color);
  padding: 10px;
  border-radius: 4px;
  font-family: monospace;
  resize: none;
  background-color: var(--light-gray);
  white-space: pre-wrap;
}

/* Task list styles */
.tasks-container {
  display: flex;
  flex-direction: column;
  gap: 15px;
  width: 100%;
  height: 100%;
}

.task-filters {
  display: flex;
  flex-direction: column;
  gap: 10px;
  margin-bottom: 10px;
  padding: 10px 0;
  border-bottom: 1px solid var(--border-color);
}

.search-box input {
  width: 100%;
  padding: 8px 10px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  font-size: 0.9rem;
}

.tag-filters {
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  margin-top: 5px;
}

.tag-filter {
  background-color: var(--light-gray);
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.8rem;
  cursor: pointer;
  transition: background-color 0.2s;
}

.tag-filter:hover {
  background-color: var(--secondary-color);
}

.tag-filter.active {
  background-color: var(--primary-light);
  color: var(--primary-dark);
  font-weight: bold;
}

.task-list {
  display: flex;
  flex-direction: column;
  gap: 10px;
  overflow-y: auto;
  max-height: calc(100vh - 300px);
  padding-right: 5px;
}

.task-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  border-radius: 4px;
  background-color: white;
  border: 1px solid var(--border-color);
  transition: box-shadow 0.2s;
}

.task-item:hover {
  box-shadow: 0 2px 8px rgba(0,0,0,0.15);
}

.task-item.scheduled {
  border: 1px solid var(--warning-color);
  background-color: #fff8e1;
}

.task-info {
  flex: 1;
  cursor: pointer;
}

.task-name {
  font-weight: 500;
  font-size: 1rem;
  margin-bottom: 5px;
  color: var(--primary-dark);
}

.task-url {
  font-size: 0.85rem;
  color: #666;
  margin-bottom: 5px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 500px;
}

.task-meta {
  display: flex;
  gap: 10px;
  font-size: 0.8rem;
  color: #666;
  margin-bottom: 5px;
}

.task-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 5px;
}

.tag {
  background-color: var(--primary-light);
  color: var(--primary-dark);
  padding: 2px 6px;
  border-radius: 4px;
  font-size: 0.7rem;
  font-weight: 500;
}

.task-actions {
  display: flex;
  gap: 5px;
}

.no-tasks {
  text-align: center;
  padding: 20px;
  color: #666;
  font-style: italic;
}

/* Modal styles */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 100;
}

.modal-content {
  background-color: white;
  border-radius: 8px;
  width: 400px;
  max-width: 90%;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
  display: flex;
  flex-direction: column;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px;
  border-bottom: 1px solid var(--border-color);
}

.modal-header h2 {
  font-size: 1.1rem;
  font-weight: 500;
  color: var(--primary-color);
  margin: 0;
}

.close-btn {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  color: #666;
}

.close-btn:hover {
  color: var(--danger-color);
}

.modal-body {
  padding: 15px;
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.modal-footer {
  padding: 15px;
  display: flex;
  justify-content: flex-end;
  gap: 10px;
  border-top: 1px solid var(--border-color);
}

.notification-box {
  background-color: var(--primary-light);
  padding: 8px 10px;
  border-radius: 4px;
  margin-top: 10px;
}

.notification-content {
  display: flex;
  align-items: center;
  gap: 5px;
}

.notification-icon {
  font-size: 1rem;
  color: var(--primary-dark);
}

.log-actions {
  display: flex;
  align-items: center;
  gap: 10px;
}

.autoscroll-toggle {
  display: flex;
  align-items: center;
  gap: 5px;
  font-size: 0.85rem;
}

.export-options {
  margin-top: 15px;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.export-option-header {
  font-weight: 500;
  margin-bottom: 5px;
}

.export-filters {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-bottom: 10px;
}

.export-task-list {
  max-height: 200px;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  gap: 5px;
  padding: 5px;
  border: 1px solid var(--border-color);
  border-radius: 4px;
}

.export-task-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 5px;
  border-bottom: 1px solid var(--border-color);
}

.export-task-item:last-child {
  border-bottom: none;
}
</style>

